{
  "name": "walk",
  "description": "A node port of python's os.walk",
  "url": "http://github.com/coolaj86/node-walk",
  "keywords": [
    "util",
    "os",
    "sys",
    "fs",
    "walk",
    "walkSync"
  ],
  "author": {
    "name": "AJ ONeal",
    "email": "coolaj86@gmail.com"
  },
  "contributors": [],
  "dependencies": {
    "forEachAsync": "~2.2"
  },
  "lib": ".",
  "main": "./lib/walk.js",
  "version": "2.3.1",
  "repository": {
    "url": "git://github.com/coolaj86/node-walk.git"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/mit-license.php"
    },
    {
      "type": "Apache2",
      "url": "http://opensource.org/licenses/apache2.0.php"
    }
  ],
  "bugs": {
    "url": "https://github.com/coolaj86/node-walk/issues"
  },
  "homepage": "https://github.com/coolaj86/node-walk",
  "directories": {
    "example": "examples",
    "test": "test"
  },
  "devDependencies": {},
  "scripts": {
    "test": "./test/walk-test.sh"
  },
  "gitHead": "9e461cd9a52daa54b86cda2f2e17e55b6750553f",
  "readme": "node-walk\r\n====\r\n\r\nnodejs walk implementation.\r\n\r\nThis is somewhat of a port python's `os.walk`, but using Node.JS conventions.\r\n\r\n  * EventEmitter\r\n  * Asynchronous\r\n  * Chronological (optionally)\r\n  * Built-in flow-control\r\n  * includes Synchronous version (same API as Asynchronous)\r\n\r\nAs few file descriptors are opened at a time as possible.\r\nThis is particularly well suited for single hard disks which are not flash or solid state.\r\n\r\nInstallation\r\n----\r\n\r\n    npm install walk\r\n\r\nUsage\r\n====\r\n\r\nBoth Asynchronous and Synchronous versions are provided.\r\n\r\n```javascript\r\n(function () {\r\n  \"use strict\";\r\n\r\n  var walk = require('walk')\r\n    , fs = require('fs')\r\n    , options\r\n    , walker\r\n    ;\r\n\r\n  options = {\r\n    followLinks: false\r\n    // directories with these keys will be skipped\r\n  , filters: [\"Temp\", \"_Temp\"]\r\n  };\r\n\r\n  walker = walk.walk(\"/tmp\", options);\r\n\r\n  // OR\r\n  // walker = walk.walkSync(\"/tmp\", options);\r\n\r\n  walker.on(\"names\", function (root, nodeNamesArray) {\r\n    nodeNamesArray.sort(function (a, b) {\r\n      if (a > b) return 1;\r\n      if (a < b) return -1;\r\n      return 0;\r\n    });\r\n  });\r\n\r\n  walker.on(\"directories\", function (root, dirStatsArray, next) {\r\n    // dirStatsArray is an array of `stat` objects with the additional attributes\r\n    // * type\r\n    // * error\r\n    // * name\r\n    \r\n    next();\r\n  });\r\n\r\n  walker.on(\"file\", function (root, fileStats, next) {\r\n    fs.readFile(fileStats.name, function () {\r\n      // doStuff\r\n      next();\r\n    });\r\n  });\r\n\r\n  walker.on(\"errors\", function (root, nodeStatsArray, next) {\r\n    next();\r\n  });\r\n\r\n  walker.on(\"end\", function () {\r\n    console.log(\"all done\");\r\n  });\r\n}());\r\n```\r\n\r\n### Sync\r\n\r\nNote: You **can't use EventEmitter** if you want truly synchronous walker\r\n(although it's synchronous under the hood, it appears not to be due to the use of `process.nextTick()`).\r\n\r\nInstead **you must use `options.listeners`** for truly synchronous walker.\r\n\r\nAlthough the sync version uses all of the `fs.readSync`, `fs.readdirSync`, and other sync methods,\r\nI don't think I can prevent the `process.nextTick()` that `EventEmitter` calls.\r\n\r\n```javascript\r\n(function () {\r\n  \"use strict\";\r\n\r\n  var walk = require('walk')\r\n    , fs = require('fs')\r\n    , options\r\n    , walker\r\n    ;\r\n\r\n  // To be truly synchronous in the emitter and maintain a compatible api,\r\n  // the listeners must be listed before the object is created\r\n  options = {\r\n    listeners: {\r\n      names: function (root, nodeNamesArray) {\r\n        nodeNames.sort(function (a, b) {\r\n          if (a > b) return 1;\r\n          if (a < b) return -1;\r\n          return 0;\r\n        });\r\n      }\r\n    , directories: function (root, dirStatsArray, next) {\r\n        // dirStatsArray is an array of `stat` objects with the additional attributes\r\n        // * type\r\n        // * error\r\n        // * name\r\n        \r\n        next();\r\n      }\r\n    , file: function (root, fileStats, next) {\r\n        fs.readFile(fileStats.name, function () {\r\n          // doStuff\r\n          next();\r\n        });\r\n      }\r\n    , errors: function (root, nodeStatsArray, next) {\r\n        next();\r\n      }\r\n    }\r\n  };\r\n\r\n  walker = walk.walkSync(\"/tmp\", options);\r\n\r\n  console.log(\"all done\");\r\n}());\r\n```\r\n\r\nAPI\r\n====\r\n\r\nEmitted Values\r\n\r\n  * `on('XYZ', function(root, stats, next) {})`\r\n\r\n  * `root` - the containing the files to be inspected\r\n  * *stats[Array]* - a single `stats` object or an array with some added attributes\r\n    * type - 'file', 'directory', etc\r\n    * error\r\n    * name - the name of the file, dir, etc \r\n  * next - no more files will be read until this is called\r\n\r\nSingle Events - fired immediately\r\n\r\n  * `end` - No files, dirs, etc left to inspect\r\n\r\n  * `directoryError` - Error when `fstat` succeeded, but reading path failed (Probably due to permissions).\r\n  * `nodeError` - Error `fstat` did not succeeded.\r\n  * `node` - a `stats` object for a node of any type\r\n  * `file` - includes links when `followLinks` is `true`\r\n    * Note: This feature is broken in the current version, but works in the previous `walk-recursive` version\r\n  * `directory`\r\n  * `symbolicLink` - always empty when `followLinks` is `true`\r\n  * `blockDevice`\r\n  * `characterDevice`\r\n  * `FIFO`\r\n  * `socket`\r\n\r\nEvents with Array Arguments - fired after all files in the dir have been `stat`ed\r\n\r\n  * `names` - before any `stat` takes place. Useful for sorting and filtering.\r\n    * Note: the array is an array of `string`s, not `stat` objects\r\n    * Note: the `next` argument is a `noop`\r\n\r\n  * `errors` - errors encountered by `fs.stat` when reading ndes in a directory\r\n  * `nodes` - an array of `stats` of any type\r\n  * `files`\r\n  * `directories` - modification of this array - sorting, removing, etc - affects traversal\r\n  * `symbolicLinks`\r\n  * `blockDevices`\r\n  * `characterDevices`\r\n  * `FIFOs`\r\n  * `sockets`\r\n\r\n**Warning** beware of infinite loops when `followLinks` is true (using `walk-recurse` varient).\r\n\r\nComparisons\r\n====\r\n\r\nTested on my `/System` containing 59,490 (+ self) directories (and lots of files).\r\nThe size of the text output was 6mb.\r\n\r\n`find`:\r\n    time bash -c \"find /System -type d | wc\"\r\n    59491   97935 6262916\r\n\r\n    real  2m27.114s\r\n    user  0m1.193s\r\n    sys 0m14.859s\r\n\r\n`find.js`:\r\n\r\nNote that `find.js` omits the start directory\r\n\r\n    time bash -c \"node examples/find.js /System -type d | wc\"\r\n    59490   97934 6262908\r\n   \r\n    # Test 1 \r\n    real  2m52.273s\r\n    user  0m20.374s\r\n    sys 0m27.800s\r\n    \r\n    # Test 2\r\n    real  2m23.725s\r\n    user  0m18.019s\r\n    sys 0m23.202s\r\n\r\n    # Test 3\r\n    real  2m50.077s\r\n    user  0m17.661s\r\n    sys 0m24.008s\r\n\r\nIn conclusion node.js asynchronous walk is much slower than regular \"find\".\r\n\r\nLICENSE\r\n===\r\n\r\n`node-walk` is available under the following licenses:\r\n\r\n  * MIT\r\n  * Apache 2\r\n\r\nCopyright 2011 - Present AJ ONeal\r\n",
  "readmeFilename": "README.md",
  "_id": "walk@2.3.1",
  "_shasum": "36eb2839201a1626a1c201a5a93d120a0be78795",
  "_from": "git://github.com/cainus/node-walk.git#9e461cd9a52daa54b86cda2f2e17e55b6750553f",
  "_resolved": "git://github.com/cainus/node-walk.git#9e461cd9a52daa54b86cda2f2e17e55b6750553f"
}
